import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../supabase';
import { callGeminiAPI } from '../gemini';

const AIMentor = () => {
    const [question, setQuestion] = useState('');
    const [conversation, setConversation] = useState([]);
    const [loading, setLoading] = useState(false);
    const { user } = useAuth();

    const handleAsk = async () => {
        if (!question) return;

        const newConversation = [...conversation, { role: 'user', text: question }];
        setConversation(newConversation);
        setQuestion('');
        setLoading(true);

        try {
            const prompt = `
                As an expert penetration testing mentor, provide a clear, detailed, and comprehensive answer to the following question.
                Your answer must include:
                1. A step-by-step explanation of the concepts involved.
                2. Relevant code samples in appropriate languages (e.g., Python, Bash, JavaScript).
                3. Practical command-line examples that can be used in a real-world scenario.
                Format your response using Markdown.

                Question: "${question}"
            `;
            const result = await callGeminiAPI(prompt);
            const updatedConversation = [...newConversation, { role: 'assistant', text: result }];
            setConversation(updatedConversation);

            if (user) {
                await saveConversation(question, result);
            }
        } catch (error) {
            console.error(error);
            const updatedConversation = [...newConversation, { role: 'assistant', text: `Sorry, I encountered an error: ${error.message}` }];
            setConversation(updatedConversation);
        } finally {
            setLoading(false);
        }
    };

    const saveConversation = async (userQuestion, aiResponse) => {
        const { error } = await supabase
            .from('mentor_conversations')
            .insert([{ user_id: user.id, question: userQuestion, answer: aiResponse }]);

        if (error) {
            console.error('Error saving conversation:', error);
        }
    };

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4">AI Mentor</h1>
            <div className="bg-white p-4 rounded shadow">
                <div className="mb-4 h-96 overflow-y-auto border rounded p-2">
                    {conversation.map((entry, index) => (
                        <div key={index} className={`mb-2 ${entry.role === 'user' ? 'text-right' : 'text-left'}`}>
                            <div
                                className={`inline-block p-2 rounded ${entry.role === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}
                                dangerouslySetInnerHTML={{ __html: entry.text.replace(/\n/g, '<br>') }}
                            />
                        </div>
                    ))}
                </div>
                <div className="flex gap-4">
                    <input
                        type="text"
                        placeholder="Ask a question..."
                        className="flex-grow p-2 border rounded"
                        value={question}
                        onChange={(e) => setQuestion(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && handleAsk()}
                    />
                    <button
                        className="bg-white text-blue-500 p-2 rounded border border-blue-500"
                        onClick={handleAsk}
                        disabled={loading}
                    >
                        {loading ? 'Thinking...' : 'Ask'}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default AIMentor;
