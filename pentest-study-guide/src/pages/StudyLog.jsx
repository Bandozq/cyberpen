import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../supabase';

const StudyLog = () => {
    const [learningPaths, setLearningPaths] = useState([]);
    const [mentorConversations, setMentorConversations] = useState([]);
    const [selectedConversation, setSelectedConversation] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [loading, setLoading] = useState(true); // Start with true
    const { user } = useAuth();

    useEffect(() => {
        const fetchData = async () => {
            if (!user) {
                setLoading(false); // Not loading if there's no user
                return;
            }

            // No need to set loading to true here, it's already true

            try {
                const { data: pathsData, error: pathsError } = await supabase
                    .from('learning_paths')
                    .select('*')
                    .eq('user_id', user.id)
                    .order('created_at', { ascending: false });

                if (pathsError) throw pathsError;
                setLearningPaths(pathsData || []);

                const { data: convosData, error: convosError } = await supabase
                    .from('mentor_conversations')
                    .select('*')
                    .eq('user_id', user.id)
                    .order('created_at', { ascending: false });

                if (convosError) throw convosError;
                setMentorConversations(convosData || []);
            } catch (error) {
                console.error('Error fetching study log:', error);
            } finally {
                setLoading(false); // Always set loading to false at the end
            }
        };

        fetchData();
    }, [user]); // Re-run this effect when the user object changes

    const filteredPaths = learningPaths.filter(path =>
        path.topic.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const filteredConversations = mentorConversations.filter(convo =>
        convo.question.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (loading) {
        return <p className="p-4 text-center">Loading study log...</p>;
    }

    return (
        <div className="container mx-auto p-4">
            <div className="flex justify-between items-center mb-4">
                <h1 className="text-2xl font-bold">Study Log</h1>
                <input
                    type="text"
                    placeholder="Search logs..."
                    className="p-2 border rounded"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                />
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div>
                    <h2 className="text-xl font-semibold mb-2">Saved Learning Paths</h2>
                    <div className="bg-white p-4 rounded shadow">
                        {filteredPaths.length === 0 ? (
                            <p>No matching learning paths.</p>
                        ) : (
                            <ul>
                                {filteredPaths.map((path) => (
                                    <li key={path.id} className="mb-2 p-2 border rounded">
                                        <h3 className="font-bold">{path.topic}</h3>
                                    </li>
                                ))}
                            </ul>
                        )}
                    </div>
                </div>
                <div>
                    <h2 className="text-xl font-semibold mb-2">Mentor Conversations</h2>
                    <div className="bg-white p-4 rounded shadow">
                        {filteredConversations.length === 0 ? (
                            <p>No matching mentor conversations.</p>
                        ) : (
                            <ul>
                                {filteredConversations.map((convo) => (
                                    <li 
                                        key={convo.id} 
                                        className="mb-2 p-2 border rounded cursor-pointer hover:bg-gray-100"
                                        onClick={() => setSelectedConversation(convo)}
                                    >
                                        <p className="font-bold truncate">{convo.question}</p>
                                    </li>
                                ))}
                            </ul>
                        )}
                    </div>
                </div>
            </div>

            {selectedConversation && (
                <div className="mt-8">
                    <h2 className="text-xl font-semibold mb-2">Selected Conversation</h2>
                    <div className="bg-white p-4 rounded shadow">
                        <h3 className="font-bold text-lg mb-2">Your Question:</h3>
                        <p className="mb-4">{selectedConversation.question}</p>
                        <h3 className="font-bold text-lg mb-2">AI Mentor's Answer:</h3>
                        <div dangerouslySetInnerHTML={{ __html: selectedConversation.answer.replace(/\n/g, '<br>') }} />
                    </div>
                </div>
            )}
        </div>
    );
};

export default StudyLog;
