import React, { useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { supabase } from '../supabase';
import { callGeminiAPI } from '../gemini';

const Home = () => {
    const [topic, setTopic] = useState('');
    const [path, setPath] = useState('');
    const [loading, setLoading] = useState(false);
    const { user } = useAuth();

    const handleGenerate = async () => {
        if (!topic) return;
        setLoading(true);
        setPath('');

        try {
            const prompt = `Create a detailed learning path for the penetration testing topic: "${topic}".`;
            const result = await callGeminiAPI(prompt);
            setPath(result);
        } catch (error) {
            console.error(error);
            setPath(`Failed to generate learning path: ${error.message}`);
        } finally {
            setLoading(false);
        }
    };

    const handleSave = async () => {
        if (!path || !user) return;

        try {
            // Use a robust regex to count all checklist markers.
            const checklistItems = (path.match(/\[ \]/g) || []).length;
            const initialChecklist = Array(checklistItems).fill(false);

            const { error } = await supabase
                .from('learning_paths')
                .insert([{ 
                    user_id: user.id, 
                    topic, 
                    content: path,
                    checklist: initialChecklist 
                }]);

            if (error) {
                // Throw the detailed error to be caught by the catch block
                throw error;
            }

            alert('Learning path saved successfully.');

        } catch (error) {
            console.error('Error saving learning path:', error);
            // Display the specific database error message
            alert(`Failed to save learning path: ${error.message}`);
        }
    };

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-4">AI-Powered Learning Path Generator</h1>
            <div className="flex gap-4">
                <input
                    type="text"
                    placeholder="Enter a topic (e.g., SQL Injection)"
                    className="flex-grow p-2 border rounded"
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                />
                <button
                    className="bg-white text-blue-500 p-2 rounded border border-blue-500"
                    onClick={handleGenerate}
                    disabled={loading}
                >
                    {loading ? 'Generating...' : 'Generate Path'}
                </button>
            </div>
            {path && (
                <div className="mt-4 p-4 border rounded bg-white">
                    <h2 className="text-xl font-bold mb-2">Generated Path</h2>
                    <div dangerouslySetInnerHTML={{ __html: path.replace(/\n/g, '<br>') }} />
                    {user && (
                        <button
                            className="mt-4 bg-white text-green-500 p-2 rounded border border-green-500"
                            onClick={handleSave}
                        >
                            Save Path
                        </button>
                    )}
                </div>
            )}
        </div>
    );
};

export default Home;
