import React, { useState, useEffect, useRef } from 'react';
import { useParams } from 'react-router-dom';
import { supabase } from '../supabase';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { callGeminiAPI } from '../gemini';
import ReactMarkdown from 'react-markdown';
import CodeBlock from '../components/CodeBlock';

const PathDetail = () => {
    const { id } = useParams();
    const [path, setPath] = useState(null);
    const [quiz, setQuiz] = useState(null);
    const [loading, setLoading] = useState(true);
    const [quizLoading, setQuizLoading] = useState(false);
    const contentRef = useRef(null);

    useEffect(() => {
        const fetchPath = async () => {
            const { data, error } = await supabase
                .from('learning_paths')
                .select('*')
                .eq('id', id)
                .single();

            if (error) {
                console.error('Error fetching path:', error);
            } else {
                setPath(data);
            }
            setLoading(false);
        };

        fetchPath();
    }, [id]);

    const handleChecklistChange = async (index) => {
        const newChecklist = [...(path.checklist || [])];
        newChecklist[index] = !newChecklist[index];

        const { data, error } = await supabase
            .from('learning_paths')
            .update({ checklist: newChecklist })
            .eq('id', id);

        if (error) {
            console.error('Error updating checklist:', error);
        } else {
            setPath({ ...path, checklist: newChecklist });
        }
    };

    const handleExport = () => {
        if (contentRef.current) {
            html2canvas(contentRef.current).then((canvas) => {
                const imgData = canvas.toDataURL('image/png');
                const pdf = new jsPDF();
                const pdfWidth = pdf.internal.pageSize.getWidth();
                const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
                pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
                pdf.save(`${path.topic}.pdf`);
            });
        }
    };

    const handleGenerateQuiz = async () => {
        setQuizLoading(true);
        try {
            const prompt = `Create a multiple-choice quiz with 5 questions based on the following learning path content:\n\n${path.content}`;
            const result = await callGeminiAPI(prompt);
            setQuiz(result);
        } catch (error) {
            console.error('Error generating quiz:', error);
            setQuiz('Failed to generate quiz.');
        } finally {
            setQuizLoading(false);
        }
    };

    if (loading) {
        return <p className="p-4">Loading learning path...</p>;
    }

    if (!path) {
        return <p className="p-4">Learning path not found.</p>;
    }

    return (
        <div className="container mx-auto p-4">
            <div className="flex justify-between items-center mb-4">
                <h1 className="text-2xl font-bold">{path.topic}</h1>
                <div>
                    <button
                        onClick={handleGenerateQuiz}
                        className="bg-green-500 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-green-600 mr-2"
                        disabled={quizLoading}
                    >
                        {quizLoading ? 'Generating...' : 'Generate Quiz'}
                    </button>
                    <button
                        onClick={handleExport}
                        className="bg-blue-500 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-600"
                    >
                        Export to PDF
                    </button>
                </div>
            </div>
            <div
                ref={contentRef}
                className="bg-white p-4 rounded shadow"
            >
                <ReactMarkdown
                    components={{
                        code({node, inline, className, children, ...props}) {
                            const match = /language-(\w+)/.exec(className || '')
                            return !inline && match ? (
                                <CodeBlock code={String(children).replace(/\n$/, '')} />
                            ) : (
                                <code className={className} {...props}>
                                    {children}
                                </code>
                            )
                        }
                    }}
                >
                    {path.content}
                </ReactMarkdown>
            </div>
            {quiz && (
                <div className="mt-8">
                    <h2 className="text-xl font-semibold mb-2">Quiz</h2>
                    <div className="bg-white p-4 rounded shadow">
                        <ReactMarkdown>{quiz}</ReactMarkdown>
                    </div>
                </div>
            )}
        </div>
    );
};

export default PathDetail;
